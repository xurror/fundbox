import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableContainer from '@mui/material/TableContainer';
import TableHead, { tableHeadClasses } from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper, { paperClasses } from '@mui/material/Paper';
import { styled } from '@mui/material/styles';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import Link from 'next/link';
import { useAuth } from '../../utils/hooks';
import { useRouter } from "next/router";
import { gql, useQuery } from "@apollo/client";
import CircularProgress from '@mui/material/CircularProgress';
import Swal from 'sweetalert2';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

function createData(
  name: string,
  amount: number,
  status: string,
) {
  return { name, amount: `${amount.toLocaleString()} XAF`, status };
}

const rows = [
  createData('In proident tempor', 15000, 'Ongoing'),
  createData('consequat cupidatat adipisicing amet.', 15000, 'Complete'),
  createData('Proident aliqua culpa eu aliqua et et in.', 15000, 'Complete'),
];

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    // backgroundColor: 'red',
    color: '#12033ACC',
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
    padding: '6px',
    color: '#12033ACC'
  },
}));

const StyledPaperClasses = styled(Paper)(({ theme }) => ({
  [`&.${paperClasses.elevation}`]: {
    boxShadow: 'none',
    border: '1px solid #CFCFDB',
    borderRadius: 12,
    backgroundColor: '#F1F3FA'
  },
}));

const StyledTableHead = styled(TableHead)(({ theme }) => ({
  [`&.${tableHeadClasses.root}`]: {
    backgroundColor: '#4C51C6',
    color: 'white'
  },
}));

const StyledTableHeaderCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    fontSize: 16,
    color: '#FFFFFF'
  },
}));


const QUERY = gql`
  query funds($limit: Int!, $offset: Int!) {
    funds(limit: $limit, offset: $offset) {
      id
      reason
      description
    }
  }
`;

export const Funds = () => {
  const router = useRouter();
  const [funds, setFunds] = useState<{
    id: string,
    reason: string,
    description: string
  }[]>([]);
  const {} = useAuth({reroute: true, from: router.asPath});
  const {data, loading, error} = useQuery(QUERY, {variables: {limit: 10, offset: 0}});

  useEffect(() => {
    if (data && data.funds) {
      setFunds(data.funds)
    }
  }, [data]);

  if (error) return Swal.fire({
    icon: 'error',
    title: 'Error',
    text: `${error.message}`,
  });

  return (
    <div className="h-screen min-h-screen flex bg-white">
      <Head>
        <title>Fundbox app</title>
        <meta name="description" content="Generated by Fundbox app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='w-full flex flex-col'>
        <div className='w-full mt-10 mb-5 flex items-center'>
          <div className='mx-6'>
            <button onClick={() => router.back()} className='flex items-center justify-center bg-blue-10 h-12 w-12 rounded-full'>
              <ArrowBackIcon className='text-blue-100 w-7 h-7' />
            </button>
          </div>
          <h1 className='text-dark_blue-100 text-3xl text-center font-semibold tracking-[-1px]'>Funds</h1>
        </div>

        {loading ? (
          <div className=' mt-5 flex justify-center items-center'>
            <CircularProgress size={20} color='inherit' />
          </div>
        ) : (
          <div className='mx-5 mt-5'>
            <TableContainer component={StyledPaperClasses}>
              <Table sx={{ width: '100%' }} size="small" aria-label="a dense table">
                <StyledTableHead>
                  <TableRow>
                    <StyledTableHeaderCell width={'50%'}>Reason</StyledTableHeaderCell>
                    <StyledTableHeaderCell width={'50%'}>Description</StyledTableHeaderCell>
                    {/* <StyledTableHeaderCell align="center" width={'25%'}>Status</StyledTableHeaderCell> */}
                  </TableRow>
                </StyledTableHead>
                <TableBody>
                  {funds.map((fund) => (
                    <TableRow
                      key={fund.id}
                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                    >
                      <StyledTableCell component="th" scope="row">
                        <Link href={`/funds/${fund.id}`}>
                          {fund.reason}
                        </Link>
                      </StyledTableCell>
                      <StyledTableCell>
                        <Link href={`/funds/${fund.id}`}>{fund.description}</Link>
                      </StyledTableCell>
                      {/* <StyledTableCell align="center">
                        <div className={
                            `text-[12px] py-[2px] rounded-xl text-white 
                            ${row.status === 'Complete' ? 'bg-success' : 'bg-grey_disabled'}`
                          }>
                          {row.status}
                        </div>
                      </StyledTableCell> */}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </div>
        )}
      </main>
    </div>
  )
}

export default Funds;