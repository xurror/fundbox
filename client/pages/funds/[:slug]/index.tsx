import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableContainer from '@mui/material/TableContainer';
import TableHead, { tableHeadClasses } from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import Paper, { paperClasses } from '@mui/material/Paper';
import { styled } from '@mui/material/styles';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import Link from 'next/link';
import dynamic from 'next/dynamic'
import { gql, useMutation, useQuery } from "@apollo/client";
import CircularProgress from '@mui/material/CircularProgress';
import { useRouter } from "next/router";

import { useAuth } from '../../../utils/hooks';

function createData(
  name: string,
  amount: number,
) {
  return { name, amount: `${amount.toLocaleString()} XAF` };
}

const rows = [
  createData('Xurro', 5000),
  createData('Abdoul', 2500),
  createData('Nasser', 25000),
];

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    color: '#12033ACC',
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: 14,
    color: '#12033ACC'
  },
}));

const StyledPaperClasses = styled(Paper)(({ theme }) => ({
  [`&.${paperClasses.elevation}`]: {
    boxShadow: 'none',
    border: '1px solid #CFCFDB',
    borderRadius: 12,
    backgroundColor: '#F1F3FA'
  },
}));


const StyledTableHead = styled(TableHead)(({ theme }) => ({
  [`&.${tableHeadClasses.root}`]: {
    backgroundColor: '#4C51C6',
    color: 'white'
  },
}));

const StyledTableHeaderCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    fontSize: 16,
    color: '#FFFFFF'
  },
  [`&.${tableCellClasses.root}`]: {
    backgroundColor: 'transparent'
  },
}));

const FUNDQUERY = gql`
  query fund($id: ID!){
    fund(id: $id) {
      reason
      description
    }
  }
`;

const FUNDCONTRIBUTIONSQUERY = gql`
  query fundContributions($fund_id: ID!, $limit: Int, $offset: Int){
    fundContributions(fund_id: $fund_id, limit: $limit, offset: $offset) {
      id
      amount {
        value
      }
      contributor {
        first_name
        last_name
      }
    }
  }
`;

export const FundDetails = () => {
  const router = useRouter();
  const [fundContributions, setFundContributions] = useState<{
    id: string,
    amount: {
      value: number
    },
    contributor: {
      first_name: string,
      last_name: string,
    }
  }[]>([]);
  const { query } = router;
  const {token} = useAuth({reroute: true, from: window.location.pathname });
  const {data: fundData, loading: loadingFund, error: fundError} = useQuery(FUNDQUERY, {
    variables: { id: query[':slug']}
  });
  const {data: contributionData, loading: loadingContributions, error: contributionsError} = useQuery(FUNDCONTRIBUTIONSQUERY, {
    variables: { fund_id: query[':slug'], limit: 10, offset: 0}
  });

  useEffect(() => {
    if (contributionData && contributionData.fundContributions) {
      console.log(contributionData.fundContributions)
      setFundContributions(contributionData.fundContributions)
    }
  }, [contributionData])
  

  return (
    <div className="h-screen min-h-screen flex bg-white">
      <Head>
        <title>Fundbox app</title>
        <meta name="description" content="Generated by Fundbox app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='w-full flex flex-col'>  
        {loadingFund ? (
          <div className=' mt-5 flex justify-center items-center'>
            <CircularProgress size={20} color='inherit' />
          </div>
        ): (
          <h1 className='mt-5 text-dark_blue-100 text-3xl text-center font-semibold tracking-[-1px]'>{fundData?.fund.reason ?? ''}</h1>
        )}

        <div className='mx-5 mt-5 flex-1'>
          <TableContainer component={StyledPaperClasses} sx={{ maxHeight: 'calc(100vh - 205px)' }}>
            <Table sx={{ width: '100%' }} size="small" stickyHeader aria-label="a dense table">
              <StyledTableHead>
                <TableRow>
                  <StyledTableHeaderCell width={'50%'}>Reason</StyledTableHeaderCell>
                  <StyledTableHeaderCell width={'50%'}>Description</StyledTableHeaderCell>
                </TableRow>
              </StyledTableHead>
              <TableBody>
                {fundContributions.map((contribution, index) => (
                  <TableRow
                    key={contribution.id}
                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                  >
                    <StyledTableCell component="th" scope="row">
                      <Link href={`/funds/${index}`}>
                        {contribution.contributor.first_name} {contribution.contributor.last_name}
                      </Link>
                    </StyledTableCell>
                    <StyledTableCell>{contribution.amount.value} XAF</StyledTableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
              {fundContributions.length === 0 && (
                <div className='text-center py-3'>No funds available yet!</div>
              )}
          </TableContainer>
          {loadingContributions && (
            <div className=' mt-5 flex justify-center items-center'>
              <CircularProgress size={20} color='inherit' />
            </div>
          )}
        </div>

        <div className='m-5'>
          <button className='bg-blue-100 w-full h-14 rounded-2xl text-white font-medium leading-6 tracking-[-0.3px] disabled:opacity-50'>
            Mark as Complete
          </button>
        </div>
      </main>
    </div>
  )
}

export default dynamic(() => Promise.resolve(FundDetails), {
  ssr: false
});