import Head from 'next/head'
import { ChangeEvent, useState } from 'react';
import LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl, {formControlClasses} from '@mui/material/FormControl';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import TextField, {textFieldClasses} from '@mui/material/TextField';
import InputAdornment from '@mui/material/InputAdornment';
import { styled } from '@mui/material/styles';
import { useAuth } from '../../../utils/hooks';
import { useRouter } from "next/router";
import { gql, useMutation, useQuery } from "@apollo/client";
import CircularProgress from '@mui/material/CircularProgress';
import Swal from 'sweetalert2';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

const StyledLinearProgress = styled(LinearProgress)(({ theme }) => ({
  [`&.${linearProgressClasses.root}`]: {
    width: '50%',
    height: '0.5rem',
    borderRadius: 50,
    backgroundColor: '#4C51C61A',
  },
}));

const StyledFormControl = styled(FormControl)(({ theme }) => ({
  [`&.${formControlClasses.root}`]: {
    width: '100%',
    marginBottom: '1rem'
  },
}));

const StyledTextField = styled(TextField)(({ theme }) => ({
  [`&.${textFieldClasses.root}`]: {
    borderRadius: '12px',
  },
}));

const Mutation = gql`
  mutation contribute($fund_id: ID!, $amount: Float!, $currency: ID!) {
    contribute(
      fund_id: $fund_id,
      input: { 
        amount: $amount,
        currency: $currency 
      } 
    ) {
      id
    }
  }
`

const QUERY = gql`
  query fund($id: ID!){
    fund(id: $id) {
      reason
      description
    }
  }
`;

// 8919833c-d419-4666-9413-9867843dd9e6 => XAF
// b8179a60-f9e0-4376-b2a5-e91ad89642dc => EUR
// 9c4a4093-619c-494c-a1cb-3cc03e578982 => USD

export const Fund = () => {
  const router = useRouter();
  const { query } = router;
  
  const [form, setForm] = useState({
    name: '',
    amount: '',
    number: '',
    paymentMethod: '',
    disabled: false
  });

  const [progress, setProgress] = useState(15);
  const [paymentMethod, setPaymentMethod] = useState('');

  const [constribute, {data: contribution, loading, error}] = useMutation(Mutation);

  const {data, loading: loadingFund, error: fundError} = useQuery(QUERY, {
    variables: { id: query[':slug']}
  });

  const create = () => {
    let _form: any = {...form}
    _form.disabled = true;
    setForm(_form);
    setProgress(85)

    constribute({
      variables: {
        fund_id: query[':slug'],
        amount: form.amount,
        currency: '8919833c-d419-4666-9413-9867843dd9e6'
      },
    })
  }

  if (contribution) {
    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: `You have successfully contributed to this fund.`,
    });
    router.push(`/funds/${query[':slug']}`)
  }

  const updateForm = (value: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, field: string) => {
    if (field === 'name') setProgress(30)
    if (field === 'number') setProgress(45)
    if (field === 'amount') setProgress(60)
    let _form: any = {...form}
    _form[field] = value.target.value
    setForm(_form)
  }

  const handleChange = (event: SelectChangeEvent) => {
    setPaymentMethod(event.target.value);
    setProgress(80)
  };

  if (error) return Swal.fire({
    icon: 'error',
    title: 'Error',
    text: `${error.message}`,
  });
  if (fundError) return Swal.fire({
    icon: 'error',
    title: 'Error',
    text: `${fundError.message}`,
  });

  return (
    <div className="h-screen min-h-screen flex bg-white">
      <Head>
        <title>Fundbox app</title>
        <meta name="description" content="Generated by Fundbox app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='w-full flex flex-col'>
        <div className='w-full mt-10 mb-6 flex items-center justify-center'>
          <div className='ml-6'>
            <button onClick={() => router.back()} className='flex items-center justify-center bg-blue-10 h-12 w-12 rounded-full'>
              <ArrowBackIcon className='text-blue-100 w-7 h-7' />
            </button>
          </div>
          <div className='flex-1 flex justify-center' style={{marginLeft: '-64px'}}>
            <StyledLinearProgress
              variant="determinate"
              value={progress}
            />
          </div>
        </div>

        <div className='flex flex-1 flex-col items-center'>
          <div className='mx-6'>
            {loadingFund ? (
              <CircularProgress size={20} color='inherit' />
            ): (
              <>
                <h1 className='text-dark_blue-100 text-4xl text-center font-semibold tracking-[-1px]'>{data.fund.reason ?? ''}</h1>
                <p className='text-dark_blue-80 text-lg text-center'>{data.fund.description ?? ''}</p>
              </>
            )}
          </div>

          <div className='w-full p-6 mt-6 mx-6'>
            <StyledFormControl>
              <StyledTextField 
                id="outlined-basic" 
                label="Name"
                variant="outlined"
                type='text'
                onChange={(e) => updateForm(e, 'name')}
                disabled={form.disabled}
              />
            </StyledFormControl>

            <StyledFormControl>
              <StyledTextField 
                id="outlined-basic" 
                label="Nmber"
                variant="outlined"
                type='number'
                onChange={(e) => updateForm(e, 'number')}
                disabled={form.disabled}
              />
            </StyledFormControl>

            <StyledFormControl>
              <StyledTextField 
                id="outlined-basic" 
                label="Amount"
                variant="outlined"
                type='number' 
                InputProps={{
                  startAdornment: <InputAdornment position="start">XAF</InputAdornment>
                }}
                onChange={(e) => updateForm(e, 'amount')}
                disabled={form.disabled}
              />
            </StyledFormControl>
            
            <StyledFormControl>
              <InputLabel id="demo-simple-select-label">Payment method</InputLabel>
              <Select
                labelId="demo-simple-select-label"
                id="demo-simple-select"
                value={paymentMethod}
                label="Payment method"
                onChange={handleChange}
                disabled={form.disabled}
              >
                <MenuItem value={'momo'}>MTN Mobile Money</MenuItem>
                <MenuItem value={'om'}>Orange Money</MenuItem>
              </Select>
            </StyledFormControl>
          </div>
          <div className='w-full px-6 my-5 mt-5'>
            <button
              className='bg-blue-100 w-full h-14 rounded-2xl text-white font-medium leading-6 tracking-[-0.3px] disabled:opacity-50'
              disabled={form.disabled}
              onClick={() => create()}
            >
              <span className='mr-4'>Submit</span>
              {loading && (
                <CircularProgress size={20} color='inherit' />
              )}
            </button>
          </div>
        </div>
      </main>
    </div>
  )
}

export default Fund;