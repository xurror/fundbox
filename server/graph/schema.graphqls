scalar UUID

type Fund {
    id: UUID!
    reason: String!
    description: String,
    contributions: [Contribution!]!
}

type Contribution {
    id: UUID!
    amount: Amount!
    contributor: User!
}

type Amount {
    value: Float!
    currency: Currency!
}

enum Currency {
    EUR,
    USD,
    XAF
}

type User {
    id: UUID!
    first_name: String!
    last_name: String!
    email: String!
    roles: [Role!]!
    contributions: [Contribution!]!
}

enum Role {
    INITIATOR,
    CONTRIBUTOR
}

type Query {
    funds: [Fund!]!
    fund(id: UUID!): Fund!
    users: [User!]!
    user(id: UUID!): User!
}

type Mutation {
    createFund(reason: String!, description: String): Fund!
    createContribution(fund_id: UUID!, amount: Float!, currency: Currency!): Contribution!
    createUser(first_name: String!, last_name: String!, email: String!, roles: [Role!]!): User!
}


