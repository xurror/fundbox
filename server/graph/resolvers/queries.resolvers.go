package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"fmt"
	"getting-to-go/graph/generated"
	"getting-to-go/models"
)

// Funds is the resolver for the funds field.
func (r *queryResolver) Funds(ctx context.Context) ([]*models.Fund, error) {
	panic(fmt.Errorf("not implemented: Funds - funds"))
}

// Fund is the resolver for the fund field.
func (r *queryResolver) Fund(ctx context.Context, id string) (*models.Fund, error) {
	panic(fmt.Errorf("not implemented: Fund - fund"))
}

// FundContributions is the resolver for the fundContributions field.
func (r *queryResolver) FundContributions(ctx context.Context, fundID *string) ([]*models.Contribution, error) {
	panic(fmt.Errorf("not implemented: FundContributions - fundContributions"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserContributions is the resolver for the userContributions field.
func (r *queryResolver) UserContributions(ctx context.Context, userID *string) ([]*models.Contribution, error) {
	panic(fmt.Errorf("not implemented: UserContributions - userContributions"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
